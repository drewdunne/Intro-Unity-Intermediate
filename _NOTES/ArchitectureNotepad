Features:
	Two players no ai, players take turns
		- bonus feature ai support
	Restart after game end
	Player names (names will just act as login for possible persistence)
	Player score tracked from one game to another (non-persistent, only for game session)
		- bonus feature persistent state
	Help / tutorial
	Main Menu

Tic Tac Toe state:
	Player state:
		Human players:
			name
			score
	Board state:
		3x3 grid of cells with either x or o
	Game state:
		whose turn is it?
		what state is the game in?
			- main menu
			- playing
				- getting initial input
			- leaderboard
			- viewing help
		the board
	Application state
		Game state
		Render layer
		Input layer

Functionality:
	- Get input
	- Print text to the screen
	- Renderer that knows about the game state
	
	
	
Arcitecture

Screens:
---------------------------
Main Menu:
1. Play
2. Leaderboard
3. Help
4. Options
4. Exit

abstract class State
{
	Run()
}

PlayGame : State
{
	override Run()
}

Leaderboard : State
{
	override Run()
}

Help : State
{
	override Run()
	Exit()
}

States
	Play Game
	Leaderboards
	Help

Application

	// current session of multiple games
	Session session;
	
	// users selection determines which state class to use
	Menu menu;
	
	// currently selected state
	State state;
	
	// executes state logic (essentially call state.Run() in a loop)
	GameLoop()
	

Main()
{
	Application app;
	app.Run();
	
	Application.Instance.Run();
}




---------------------------------------------
interface IApplicationState
{
    // returns the next state to be in
	IApplicationState Run();
	
	InputManager input;
	OutputManager output;
};

class MenuState : IApplicationState
{
	public MenuState(InputManager inputManager, OutputManager outputManager)
	{
		_inputManager = inputManager;
		_outputManager = outputManager;
	}

    // going to output a menu and ask for user input
	// once user picks input we're going to change screens to the corresponding user selection
    override Run()
	{
		base.Run();
		// do more stuff
	}
}

Main()
{
	Singleton.Instance.SomeMethod();
}

class PlayingState : IApplicationState
{
    override Run();
}

class Application
{
	InputManager inputManager = new InputManager();
	OutputManager outputManager = new OutputManager();
	IApplicationState _state = new MenuState(inputManager, outputManager);

	public void Run()
	{	
		while (_state != null)
		{
			_state = _state.Run();
		}
	}
}
	
new application
do(
display menu
screen choose
screen.executes
)



----------------- My Architecture -----------------

public void main()
{ new application
	currentState = menuState
	
	public abstract class ApplicationState
	protected currentState {get; set;}
	protected InputManager input = new InputManager();
    protected OutputManager output = new OutputManager();
	
	
	
	public run()
	{
		

public class SessionState : ApplicationState
	public SessionState(input, output)
	public Run()
	public Update()
	
public class MenuState : ApplicationState
	public MenuState(input, output)
	public Run()

public class LeaderboardState : ApplicationState
	public LeaderboardState(input, output)
	public Run()
	
public class HelpState : ApplicationState
	public HelpState(input, output)
	public Run()











	